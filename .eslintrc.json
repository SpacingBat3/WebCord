{
  "env": {
    "es6": true,
    "node": true,
    "browser": true
  },
  "overrides": [
    // JSON linting
    {
      "files": ["*.json"],
      "plugins": ["json-schema-validator"],
      "extends": ["plugin:json-schema-validator/recommended"]
    },
    // TypeScript linting
    {
      "files": ["*.ts", "*.mts", "*.cts"],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": "./tsconfig.json"
      },
      "plugins": ["@typescript-eslint","import"],
      "settings": {
        "import/core-modules": [
          "electron/main",
          "electron/common",
          "electron/renderer"
        ],
        "import/parsers": {
          "@typescript-eslint/parser": [".ts", ".mts", ".cts"]
        },
        "import/resolver": {
          "typescript": {
            "alwaysTryTypes": true,
            "project": "./tsconfig.json"
          }
        }
      },
      "extends": [
        "eslint:recommended",
        "plugin:import/recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:@typescript-eslint/strict",
        "plugin:import/typescript"
      ],
      "rules": {
        /*** ESLint cosmetic rules ***/
        "no-trailing-spaces": ["warn", {
          "skipBlankLines": true,
          "ignoreComments": true
        }],
        // Broken rules with TypeScript
        "camelcase": "off",
        "indent": "off",
        "semi": "off",
        "quotes": "off",

        /*** ESLint built-in rules ***/
        "valid-typeof": "error",
        "guard-for-in": "error",
        "no-await-in-loop": "error",
        "no-unmodified-loop-condition": "error",
        "eqeqeq": "error",
        "no-constant-binary-expression": "error",
        "no-eval": "error",
        "no-restricted-imports": ["error", {
          "name": "electron",
          "message": "This module does not provide the information about the process type. Please use 'electron/common', 'electron/main' or 'electron/renderer' instead."
        }],

        /*** TypeScript ESLint cosmetic rules ***/
        "@typescript-eslint/member-delimiter-style": "warn",
        "@typescript-eslint/indent": ["warn", 2, {
          "SwitchCase": 1
        }],
        "@typescript-eslint/semi": "warn",
        "@typescript-eslint/quotes": ["warn", "double", {"avoidEscape": true }],
        // TODO: Define naming conventions (to replace camelcase rule).
        /*"@typescript-eslint/naming-convention": ["warn", {
          "selector": "default",
          "format": ["camelCase", "PascalCase"],
          "leadingUnderscore": "allow"
        },{
          "selector": "property",
          "format": ["camelCase", "PascalCase","UPPER_CASE","snake_case"],
          "leadingUnderscore": "forbid"
        }],*/

        /*** TypeScript ESLint plugin rules ***/
        "@typescript-eslint/switch-exhaustiveness-check": "warn",
        "@typescript-eslint/strict-boolean-expressions": ["error", {
          "allowString": false,
          "allowNumber": false
        }],
        "@typescript-eslint/no-confusing-void-expression": ["warn", {
          "ignoreArrowShorthand": true
        }],
        "@typescript-eslint/consistent-type-assertions": ["error", {
          "assertionStyle": "as",
          "objectLiteralTypeAssertions": "never"
        }],
        "@typescript-eslint/no-meaningless-void-operator": ["error", {
          "checkNever": true
        }],
        "@typescript-eslint/no-unsafe-argument": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-call": "error",
        "@typescript-eslint/no-unsafe-member-access": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        // Same as in TSC.
        "@typescript-eslint/no-unused-vars": "error",
        // Interfaces compile faster.
        "@typescript-eslint/consistent-type-definitions": ["error", "interface"],

        /*** Import plugin rules ***/
        "import/no-unused-modules": ["error", {
          "unusedExports": true
        }]
      }
    }
  ]
}
